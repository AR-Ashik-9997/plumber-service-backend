// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String
  password      String
  role          Role?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Profile       Profile[]
  Feedback      Feedback[]
  Booking       Booking[]
  Blog          Blog[]
  ProductReview ProductReview[]
  ServiceReview ServiceReview[]
  Comment       Comment[]

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  username  String
  contactNo String
  address   String
  image     String
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Service {
  id            String          @id @default(uuid())
  title         String
  description   String
  image         String
  price         String
  category      String
  feature1      String
  feature2      String
  feature3      String
  feature4      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Booking       Booking[]
  ServiceReview ServiceReview[]

  @@map("services")
}

model ServiceCategory {
  id          String   @id @default(uuid())
  titles      String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Booking {
  id            String          @id @default(uuid())
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  serviceId     String
  service       Service         @relation(fields: [serviceId], references: [id])
  date          String
  time          String
  status        Status?         @default(Pending)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ServiceReview ServiceReview[]

  @@map("bookings")
}

model Blog {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  username  String
  image     String
  title     String
  blog      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]

  @@map("blogs")
}

model Product {
  id            String          @id @default(uuid())
  image         String
  title         String
  rating        String
  price         String
  description   String
  features      Json[]
  categoryName  String
  quantity      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProductReview ProductReview[]

  @@map("products")
}

model ProductReview {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  userName  String
  review    String
  rating    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("productreviews")
}

model ServiceReview {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  review    String
  rating    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}

model Faq {
  id        String   @id @default(uuid())
  list      Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  admin
  user
  super_admin
}

enum Status {
  Pending
  Accepted
  Rejected
}
